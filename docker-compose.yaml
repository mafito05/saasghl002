services:
  saas_backend:
    build: .
    container_name: saas_backend
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env
    # Permite que el contenedor se comunique con el host usando 'host.docker.internal'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - my_saas_network

  postgres:
    image: postgres:14
    container_name: evolution_postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5434:5432"
    volumes:
      - evolution_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my_saas_network

  redis:
    image: redis:7
    container_name: evolution_redis
    restart: always
    volumes:
      - evolution_redis_data:/data
    networks:
      - my_saas_network

volumes:
  evolution_postgres_data:
  evolution_redis_data:
  # Ya no necesitamos un volumen para las instancias de evolution, 
  # la nueva API las maneja en memoria o de forma m√°s simple.

networks:
  my_saas_network:
    name: my_saas_network
    driver: bridge
